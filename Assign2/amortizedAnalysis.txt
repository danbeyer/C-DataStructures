Daniel Beyer
CS261 - 400
beyerda@oregonstate.edu
07/08/16

1. How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts
out at capacity 8, assuming that the array will double in capacity each time a new item is added to an already full dynamic array? As
N (ie. the number of pushes) grows large, under this strategy for resizing, what is the amortized complexity for a push?

8 + 16 + 32 = 56 cost units.

Amortized complexity = O(1)+

2. How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts out
at capacity 8, assuming that the array will grow by a constant 2 spaces each time a new item is added to an already full dynamic
array? As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the amortized complexity for a
push?

Push Ops	Cost
8		8
1		9
1 		1
1		11
1		1
1		13
1		1
1		15
1		1
1		17
1		1
1		19
1		1
1		21
1		1
1		23
1		1
1		25
1		1
1		27
1		1
1		29
1		1
1		31
1		1

Total = 260 units
Complexity of each push = O(n)

3. Suppose that a dynamic array stack doubles its capacity when it is full, and shrinks (on Pop only) its capacity by
half when the array is half full or less. Can you devise a sequence of N push() and pop() operations which will result in poor
performance (O(N^2) total cost)? How might you adjust the array's shrinking policy to avoid this? (Hint: You may assume that the
initial capacity of the array is N/2.)

Starting with capacity N/2, alternate between push and pop, ie push, pop, push, pop...this will initiate a chain of doubling the array
capacity when full (push) and shrinking by half (pop).  Since shrinking and growing the array are N units, the complexity would be 
N*N units = O(N^2).

To avoid this, the shrinking policy could be set to shrink by 1/2 when the array is 1/4 full.